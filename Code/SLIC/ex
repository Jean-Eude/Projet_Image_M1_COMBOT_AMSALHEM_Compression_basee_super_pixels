#include "Include/ImageBase.h"
#include <stdio.h>
#include <iostream>
#include <cmath>
#include <algorithm>

struct Cluster {
	int x, y;
	int L, a, b;
};

// Fonction pour clamp une valeur
int clamp(int value) {
    return std::max(0, std::min(value, 255));
}

// RGB		-->		YUV 	
void RGB2YUV(ImageBase &imIn, ImageBase &imOut, char c) {
    for (int x = 0; x < imIn.getHeight(); x++) {
        for (int y = 0; y < imIn.getWidth(); y++) {            
			if(c == 'Y') {
				imOut[x][y] = 0.299*imIn[x*3][y*3] + 0.587*imIn[x*3][y*3+1] + 0.114*imIn[x*3][y*3+2];
			} else if(c == 'U') {
				imOut[x][y] = -0.1687*imIn[x*3][y*3] - 0.3313*imIn[x*3][y*3+1] + 0.5*imIn[x*3][y*3+2] + 128;
			} else if(c == 'V') {
				imOut[x][y] = 0.5*imIn[x*3][y*3] - 0.4187*imIn[x*3][y*3+1] - 0.0813*imIn[x*3][y*3+2] + 128;
			}          
        }
    }
}

// RGB		-->		Lab 	
double F(double t) {return (t > 0.008856) ? pow(t, 1.0 / 3.0) : (7.787 * t + 16.0 / 116.0);}

void RGBtoLab(ImageBase &imIn, ImageBase &imOut, char c) {
    for (int x = 0; x < imIn.getHeight(); x++) {
        for (int y = 0; y < imIn.getWidth(); y++) {       

			double X = clamp(imIn[x*3][y*3] * 0.412453 + imIn[x*3][y*3+1] * 0.357580 + imIn[x*3][y*3+2] * 0.180423);
			double Y = clamp(imIn[x*3][y*3] * 0.212671 + imIn[x*3][y*3+1] * 0.715160 + imIn[x*3][y*3+2] * 0.072169);
			double Z = clamp(imIn[x*3][y*3] * 0.019334 + imIn[x*3][y*3+1] * 0.119193 + imIn[x*3][y*3+2] * 0.950227);
				
			double Xn = 95.047;
			double Yn = 100.000;
			double Zn = 108.883;
				
			double f1 = F(X / Xn);
			double f2 = F(Y / Yn);
			double f3 = F(Z / Zn);

			if(c == 'L') {
				imOut[x][y] = static_cast<int>(clamp(116 * f2 - 16));;
			} else if(c == 'a') {
				imOut[x][y] = static_cast<int>(clamp(500 * (f1 - f2)) + 128);
			} else if(c == 'b') {
				imOut[x][y] = static_cast<int>(clamp(200 * (f2 - f3)) + 128);
			}          
        }
    }
}


void Convert2Gradient(ImageBase &imIn, ImageBase &imOut) {
	double gradX, gradY;

    for (int x = 0; x < imOut.getHeight(); x++)
    {
        for (int y = 0; y < imIn.getWidth(); y++)
        {
            gradX = (y < imIn.getWidth() - 1) ? imIn[x][y + 1] - imIn[x][y] : imIn[x][y] - imIn[x][y - 1];
            gradY = (x < imIn.getHeight() - 1) ? imIn[x + 1][y] - imIn[x][y] : imIn[x][y] - imIn[x - 1][y];

            imOut[x][y] = std::clamp(sqrt(gradX * gradX + gradY * gradY), 0., 255.);
        }
    }	
}


// Fonction pour perturber les centres des clusters
void perturbClusterCenters(ImageBase &imIn, ImageBase &gradient, int n, std::vector<Cluster> &clusterCentres) {
    for (int i = 0; i < clusterCentres.size(); ++i) {
        int x = clusterCentres[i].x;
        int y = clusterCentres[i].y;

        double minGradient = gradient[x][y];
        int newX = x, newY = y;

        for (int dx = -n/2; dx <= n/2; ++dx) {
            for (int dy = -n/2; dy <= n/2; ++dy) {
                int nx = x + dx;
                int ny = y + dy;

                if (nx >= 0 && nx < gradient.getHeight() && ny >= 0 && ny < gradient.getWidth()) {
                    if (gradient[nx][ny] < minGradient) {
                        minGradient = gradient[nx][ny];
                        newX = nx;
                        newY = ny;
                    }
                }
            }
        }

        clusterCentres[i].x = newX;
        clusterCentres[i].y = newY;
		clusterCentres[i].L = imIn[newX*3][newY*3];
		clusterCentres[i].a = imIn[newX*3][newY*3+1];
		clusterCentres[i].b = imIn[newX*3][newY*3+2];
    }
}

// Fonctions de distances (Position & Couleurs & les 2 (5D))
double distanceSpaciale(Cluster p1, Cluster p2) {
    return std::sqrt(((p1.x - p2.x) * (p1.x - p2.x)) + ((p1.y - p2.y) * (p1.y - p2.y)));
}

double distanceSpectrale(ImageBase &imIn, Cluster p1, Cluster p2) {
    return std::sqrt(imIn[p1.x*3][p1.y*3] * imIn[p2.x*3][p2.y*3] + imIn[p1.x*3][p1.y*3+1] * imIn[p2.x*3][p2.y*3+1] + imIn[p1.x*3][p1.y*3+2] * imIn[p2.x*3][p2.y*3+2]);
}

double calculDistances(double distanceSpaciale, double distanceSpectrale, int m, int S) {
    return distanceSpectrale + (m/S) * distanceSpaciale; 
}


int main(int argc, char **argv)
{
	char cNomImgLue[250], cNomImgEcrite[250];
	int K, m, n, nbIter;

	if (argc != 7) 
	{
		printf("Usage: ImageIn.pgm ImageOut.pgm Seuil \n"); 
		return 1;
	}
	sscanf (argv[1],"%s", cNomImgLue) ;
	sscanf (argv[2],"%s", cNomImgEcrite);
	// Nombre de superpixels
	sscanf (argv[3],"%d", &K);
	// Compacité
	sscanf (argv[4],"%d", &m);
	// vosisnage pertubation
	sscanf (argv[5],"%d", &n);
	// Nombre d'itérations = treshold
	sscanf (argv[6],"%d", &nbIter);
		
	ImageBase imIn;
	imIn.load(cNomImgLue);

	ImageBase imOut(imIn.getWidth(), imIn.getHeight(), imIn.getColor());

	// Image de base
	for(int x = 0; x < imIn.getHeight(); x++) {
		for(int y = 0; y < imIn.getWidth(); y++) {
			imOut[x*3][y*3] = imIn[x*3][y*3];
			imOut[x*3][y*3+1] = imIn[x*3][y*3+1];
			imOut[x*3][y*3+2] = imIn[x*3][y*3+2];	
		}
	}

	// Nombre de pixels de image
	int N = imIn.getWidth() * imIn.getHeight();
	std::cout << N << std::endl;

	/*
	// Affichage de tous les pixels
	for(int x = 0; x < imIn.getHeight(); x++) {
		for(int y = 0; y < imIn.getWidth(); y++) {
			imOut[x*3][y*3] = 255;
			imOut[x*3][y*3+1] = 255;
			imOut[x*3][y*3+2] = 255;	
		}
	}*/

	// Nombre de superpixels = K

	// Taille de chaque superpixels
	double tailleSP = static_cast<double>(N)/static_cast<double>(K);
	// Distance entre chaque superpixel
	int S = sqrt(tailleSP);

	// Liste des centres des clusters
	std::vector<Cluster> clusterCentres;

	// Initialisation des clusters
	for(int x = S; x < imIn.getHeight() - S; x+=S) {
		for(int y = S; y < imIn.getWidth() - S; y+=S) {
			Cluster p = {x, y, imIn[x*3][y*3], imIn[x*3][y*3+1], imIn[x*3][y*3+2]};
			clusterCentres.push_back(p);
		}
	}

	// RGB  -->  Y
	ImageBase L(imOut.getWidth(), imOut.getHeight(), false);
 	RGBtoLab(imOut, L, 'L');

	// Gradient
	ImageBase Gradient(imOut.getWidth(), imOut.getHeight(), false);
	Convert2Gradient(L, Gradient);
	perturbClusterCenters(imOut, Gradient, n, clusterCentres);

	
	int E = 0;
	int iteration = 0;
	while (iteration <= nbIter) {
		iteration++; 
		int totalDistance = 0;

		E += 1;

		if (E <= nbIter) {
			break;
		}
	}


	// Redraw des cluster de clusterCentres
	ImageBase test(imOut.getWidth(), imOut.getHeight(), imIn.getColor());
	for (int i = 0; i < clusterCentres.size(); i++) {
		Cluster p = clusterCentres[i];
		test[p.x * 3][p.y * 3] = 255;
		test[p.x * 3][p.y * 3 + 1] = 255;
		test[p.x * 3][p.y * 3 + 2] = 255;
	}

	Gradient.save(cNomImgEcrite);
}
